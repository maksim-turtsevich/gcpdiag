#!/usr/bin/env python3
"""Development script to strip out any sensitive data from GCP API responses."""

# pylint: disable=invalid-name

import json
import re
import sys

clean_maps = {
    'apigee': {
        '.caCertificate': 'REDACTED',
        '.apigeeProjectId': 'REDACTED'
    },
    'cloudrun': {
        '.services.[].creator': 'REDACTED',
        '.services.[].binaryAuthorization': 'REDACTED'
    },
    'cloudfunctions': {
        '.cloudfunctions.[].sourceToken': 'REDACTED'
    },
    'appengine_versions': {
        '.versions.[].createdBy': 'REDACTED'
    },
    'clusters': {
        '.clusters.[].endpoint': '192.168.1.1',
        '.clusters.[].masterAuth.clusterCaCertificate': 'REDACTED',
    },
    'instances': {
        # not really sensitive, but we don't care about it...
        '.items.[].disks.[].shieldedInstanceInitialState.dbs.[].content':
            'REDACTED',
        '.items.[].disks.[].shieldedInstanceInitialState.dbxs.[].content':
            'REDACTED',
        '.items.[].disks.[].shieldedInstanceInitialState.keks.[].content':
            'REDACTED',
        '.items.[].disks.[].shieldedInstanceInitialState.pk.content':
            'REDACTED',
        '.items.[].fingerprint':
            'REDACTED',
        '.items.[].metadata.fingerprint':
            'REDACTED',
        '.items.[].metadata.items.configure-sh':
            'REDACTED',
        '.items.[].metadata.items.kube-env':
            'REDACTED',
        '.items.[].metadata.items.user-data':
            'REDACTED',
        '.items.[].networkInterfaces.[].fingerprint':
            'REDACTED',
        '.items.[].tags.fingerprint':
            'REDACTED',
    },
    'compute-templates': {
        '.items.[].properties.metadata.fingerprint': 'REDACTED',
        '.items.[].properties.metadata.items.configure-sh': 'REDACTED',
        '.items.[].properties.metadata.items.kube-env': 'REDACTED',
        '.items.[].properties.metadata.items.user-data': 'REDACTED',
    },
    'compute-project': {
        '.commonInstanceMetadata.items.sshKeys': 'REDACTED'
    },
    'service-accounts': {
        '.accounts.[].oauth2ClientId': 'REDACTED'
    },
    'other': {}
}


def traverse_and_clean(path: str, data, clean_map: dict):
  if path in clean_map:
    return clean_map[path]

  if isinstance(data, dict):
    for key in list(data.keys()):
      key_path = path + '.' + key
      data[key] = traverse_and_clean(key_path, data[key], clean_map)
  elif isinstance(data, list):

    for i in range(len(data)):
      # special case: "key", "value" list -> lookup as dict
      if isinstance(data[i], dict) and 'key' in data[i] and 'value' in data[i]:
        key_path = path + '.' + data[i]['key']
        if key_path in clean_map:
          data[i]['value'] = clean_map[key_path]
      else:
        data[i] = traverse_and_clean(path + '.[]', data[i], clean_map)
  elif isinstance(data, str):
    # obfuscate real email addresses
    data = re.sub(r'[a-z]+@google\.com', 'testuser@example.com', data)
  return data


def main():
  data = json.load(sys.stdin)

  if len(sys.argv) != 2:
    print('usage: json-cleaner RESOURCE_TYPE')
    sys.exit(1)

  resource_type = sys.argv[1]
  if resource_type not in clean_maps:
    print('first argument must be one of: ' +
          ', '.join(sorted(clean_maps.keys())),
          file=sys.stderr)
    sys.exit(1)

  # transform using clean_maps
  data = traverse_and_clean('', data, clean_maps[resource_type])
  print(json.dumps(data, indent=2, sort_keys=True))


main()
